{"version":3,"file":"logger.umd.js","sources":["../src/helpers/truthy.js","../src/helpers/pad-zero.js","../src/helpers/get-formatted-time.js","../src/helpers/is-node.js","../src/plugins/local-console.js","../src/index.js"],"sourcesContent":["/*!\r\n * bqliu\r\n * simple function that always return true\r\n */\r\n\r\nexport default () => true\r\n","/*!\r\n * bqliu\r\n * simple function that pad several zero in the left\r\n * use to tranform time, e.g. '2018-04-05 01:02:58.009'\r\n */\r\n\r\nimport truthy from './truthy'\r\n\r\nconst padZero = (x, xCnt = 1, pred = truthy, direction = 'left') => {\r\n  const n = Number(x)\r\n\r\n  let zeros = ''\r\n\r\n  for (let i = 1; i <= xCnt; ++i) {\r\n    zeros += '0'\r\n  }\r\n\r\n  if (pred(x)) {\r\n    return direction === 'left'\r\n           ? `${zeros}${x}`\r\n           : direction === 'right'\r\n             ? `${x}${zeros}`\r\n             : String(x)\r\n  }\r\n\r\n  return String(x)\r\n}\r\n\r\nexport const padZeroLeft = padZero\r\n\r\nexport const padZeroRight = (x, xCnt, pred) => padZero(x, xCnt, pred, 'right')\r\n","/*!\r\n * bqliu\r\n * use to get current formatted time\r\n */\r\n\r\nimport { padZeroLeft } from './pad-zero'\r\n\r\nconst r0To10 = (x) => x >= 0 && x < 10\r\nconst r10To100 = (x) => x >= 10 && x < 100\r\n\r\nconst processMilliseconds = (ms) => (ms / 1000).toFixed(3).slice(2)\r\n\r\nconst formatTime = (time) => {\r\n  const t = Object.keys(time)\r\n    .reduce((acc, prop) => {\r\n      acc[prop] = prop === 'milliseconds'\r\n                ? processMilliseconds(time[prop])\r\n                : padZeroLeft(time[prop], 1, r0To10)\r\n      return acc\r\n    }, { })\r\n\r\n  return `${t.year}-${t.month}-${t.date} ${t.hours}:${t.miniutes}:${t.seconds}.${t.milliseconds}`\r\n}\r\n\r\nconst getTime = () => {\r\n  const now = new Date()\r\n\r\n  return {\r\n    year: now.getFullYear(),\r\n    month: now.getMonth(),\r\n    date: now.getDate(),\r\n    hours: now.getHours(),\r\n    miniutes: now.getMinutes(),\r\n    seconds: now.getSeconds(),\r\n    milliseconds: now.getMilliseconds()\r\n  }\r\n}\r\n\r\nexport default () => formatTime(getTime())\r\n","/*!\r\n * bqliu\r\n * use to test the runtime env\r\n * simple test only\r\n */\r\n\r\nexport default () => typeof process === 'object'\r\n","/*!\r\n * bqliu\r\n * default local console logger\r\n */\r\n\r\nimport isNode from '../helpers/is-node'\r\n\r\nconst inNodeEnv = isNode()\r\n\r\nconst localConsole = inNodeEnv\r\n                     ? console\r\n                     : typeof window.console !== 'undefined'\r\n                       ? window.console\r\n                       : null\r\n\r\nconst config = {\r\n  DEBUG: { color: 'black' },\r\n  INFO: { color: 'blue' },\r\n  WARN: { color: 'orange' },\r\n  ERROR: { color: 'red' }\r\n}\r\n\r\nconst formatStyle = style => {\r\n  return Object.keys(style)\r\n    .reduce((acc, prop) => acc.concat(`${prop}: ${style[prop]}`), [ ])\r\n    .join(';')\r\n}\r\n\r\nexport default (time, level, module, content) => {\r\n  const style = config[level]\r\n  if (localConsole) {\r\n    if (inNodeEnv) {\r\n      // now we can easily log it without color\r\n      localConsole.log(`[${time}] [${level}] [${module}] - ${content}`)\r\n      return\r\n    }\r\n    localConsole.log(\r\n      `%c[${time}] [${level}] [${module}] %c- ${content}`,\r\n      formatStyle(style),\r\n      'color: black'\r\n    )\r\n  }\r\n}\r\n","/*!\r\n * bqliu\r\n * the logger manager\r\n */\r\n\r\nimport getFormattedTime from './helpers/get-formatted-time'\r\nimport localConsoleCoreLogger from './plugins/local-console'\r\n\r\nconst levels = [ 'DEBUG', 'INFO', 'WARN', 'ERROR' ]\r\n\r\nconst loggers = { }\r\n\r\nconst logCore = function (time, level, module, content, logFn) {\r\n  try {\r\n    logFn.apply(this, time, level, module, content)\r\n  } catch(e) {\r\n    /* Ignore */\r\n  }\r\n}\r\n\r\nconst logger = {\r\n  addCoreLogger (type, logFn) {\r\n    // bind\r\n    loggers[type] = { }\r\n    levels.forEach((level) => loggers[type][level] = (module, content) => logFn.call(this, getFormattedTime(), level, module, content))\r\n  },\r\n  removeCoreLogger (type, logFn) {\r\n    delete loggers[type]\r\n  },\r\n  getCoreLogger (type) {\r\n    return loggers[type]\r\n  }\r\n}\r\n\r\nlogger.addCoreLogger('localConsole', localConsoleCoreLogger)\r\n\r\n;levels.forEach((level) => {\r\n  logger[level] = function (module, content) {\r\n    logger.getCoreLogger('localConsole')[level].apply(this, arguments)\r\n  }\r\n})\r\n\r\nexport default logger\r\n"],"names":["const","let","this"],"mappings":"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"}